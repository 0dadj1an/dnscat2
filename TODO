Bits and pieces:
- Handle timeouts / closed ports when connecting
- Manually close a tunnel on the server
- Get a list of tunnels on the server
- Fix up the UX to make it as nice as possible
- When a client disconnects, free the socket
- Add a 'reason' to the CLOSED message

Before release
- Update user-facing docs
- Update protocol docs
- Make sure it still compiles on Windows
- Check for memory leaks

Server can forward ports like -L -R and -D from ssh

local_forward - goes into the server and goes out the client (probably more common)
proxy_forward - server starts a proxy server, requests come out the client
remote_forward - goes into the client and comes out the server

For local forward to work...
- The server has to listen on a port
  - Probably in its own driver? One driver per port?
- When a new connection comes in, the server will send the client a notification that a new session is being created
- The client will make the connection it's supposed to
- Any traffic that comes to the server has to be sent over to the client
- Any traffic that comes to the client has to be sent over to the server

For proxy forward to work...
- Almost the same as local forward
- When a new connection comes in, the proxy (socks4) header is parsed
- The client is told to make a connection

^ In both cases, the server tells the client to make a connection on its behalf

For remote forward to work...
- The server tells the client to listen on a port
- The client listens
- When a new connection comes in, the client tells the server about it
- The server makes the appropriate connection on its end

In all cases, once the socket is created, there's no difference - they're all full duplex

There has to be a global list of the sockets
- Perhaps a tunnel_controller
- Or can it all be done from a single tunnel_driver?
- Do remote and local have to be different?

Things that the server has to tell the client:
- Connect to a host (local/proxy forward)
- Listen on a socket (remote forward)

Things the client has to tell the server:
- Connect to a host (remote forward)

If both sides load tunnel_driver, then it just needs a simple protocol that works in either direction

TUNNEL_CONNECT
* Request:
  * IP (NTString)
  * Port
* Response:
  * Tunnel ID

TUNNEL_LISTEN
* Request:
  * IP (NTString)
  * Port
* Response:
  * Tunnel ID

TUNNEL_CLOSE
* Request:
  * Tunnel ID

TUNNEL_DATA
* Request:
  * Tunnel ID
  * Data
* Response:
  * Tunnel ID
  * Data

TUNNEL_KEEPALIVE
* Request:
  * n/a
* Response:
  * Can be a TUNNEL_DATA response

The client 
