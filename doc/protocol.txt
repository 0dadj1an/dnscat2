+--------------+
| Introduction |
+--------------+

This document describes the dnscat2 protocol.

I'm referring to this protocol as the dnscat2 protocol, although,
strictly speaking, it's not specific to dnscat or DNS in any way.
Basically, I needed a protocol that could track logical connections over
multiple lower-level connections/datagrams/whatever that aren't
necessarily reliable and where bandwidth is extremely limited.

Because this is designed for dnscat, it is poll-based - that is, the
client sends a packet, and the server responds to it. The server can't
know where the client is or how to initiate a connection, so that's
taken into account.

This protocol is datagram-based, has 16-bit session_id values that can
track the connection over multiple lower level connections, and handles
lower-level dropped/duplicated/out-of-order packets.

Below, I give a few details on what's required to make this work, a
description of how connections work, some constants used in the
messages, and, finally, a breakdown of the messages themselves.

+---------+
| License |
+---------+

See LICENSE.TXT.

+-----+
| DNS |
+-----+

Although this protocol will work over any protocol, it's designed to
work over DNS, which has some interesting restrictions:
- Every message requires a response of some sort
- Retransmissions and drops and out-of-order packets are extremely
  common
- DNS is restricted to alphanumeric characters, and isn't necessarily
  case sensitive

For that reason, we take some special considerations.

The initial draft only supports TXT records. The request is always in
the form of:
- [encoded data].[domain]

Where [encoded data] is the packet, as described below, converted
directly to a hexadecimal representation, and [domain] is agreed upon in
advance through some channel.

The [encoded data] can be split across multiple fields, in the form of
"a.b.c.d". The periods should be simply ignored and discarded. The
official client endeavors to avoid splitting a byte across boundaries
(eg, "41.4141" is preferred to "414.141"), but the server supports it.

Each field (ie, the section between two periods) has a maximum length of
63, per the DNS spec, and the maximum total amount of data is 255 bytes.
All clients should respect that limitation, otherwise they won't work
across the Internet.

The [domain] can be any domain, and is discarded by the server before
proceeding.

The TXT response is simply the byte data, encoded in the agreed-upon
fashion. The maximum length of the TXT response, per the spec, is 255
bytes. Nothing else - domain, periods, etc - may be present, the
response is simply the data.

Future versions will allow CNAME, MX, A, AAAA, and other record types.
Currently, only TXT is supported it because it's the simplest.

+-------------+
| Connections |
+-------------+

These are all the problems I can think of that come up in a protocol
like this (this applies to SYN, MSG, or FIN packets):
- A request/response is dropped
- A request/response is repeated
- An old request/response arrives late

All of those need to be considered when handling the message types
below.

The concept of a connection is like a TCP connection. A connection is
denoted by a 16-bit SessionID value in the header. A client is designed
to deal with just a single session (usually), whereas the server is
expected to handle multiple simultaneous sessions.

A valid connection starts with the client sending a SYN to the server,
and the server responding to that SYN. From that point, until either
side sends a FIN (or an arbitrary timeout value is reached), the
connection is established.

A FIN terminates a connection, and out-of-connection packets (for
example, an unexpected SYN) are generally ignored.

A good connection looks like this:

 +----------------+
 | Client  Server |  [[ Good connection ]]
 +----------------+
 |  SYN -->  |    |
 |   |       v    |
 |   |  <-- SYN   |
 |   v       |    |
 |  MSG -->  |    |
 |   |       v    |
 |   |  <-- MSG   |
 |   v       |    |
 |  MSG -->  |    |
 |   |       v    |
 |   |  <-- MSG   |
 |  ...     ...   |
 |  ...     ...   |
 |  ...     ...   |
 |   |       |    |
 |   v       |    |
 |  FIN -->  |    |
 |           v    |
 |      <-- FIN   |
 +----------------+

If there's an error in the connection, the server will return a FIN:

 +----------------+
 | Client  Server |  [[ Error during connection ]]
 +----------------+
 |  SYN -->  |    |
 |   |       v    |
 |   |  <-- SYN   |
 |   v       |    |
 |  MSG -->  |    |
 |   |       v    |
 |   |  <-- MSG   |
 |   v       |    |
 |  MSG -->  |    |
 |   |       v    |
 |   |  <-- FIN   |
 |   v            |
 | (nil)          |
 +----------------+


If an unexpected MSG is received, the server will respond with an error
(FIN):

 +----------------+
 | Client  Server |  [[ Good connection ]]
 +----------------+
 |  MSG -->  |    |
 |   |       v    |
 |   |  <-- FIN   |
 |   v            |
 | (nil)          |
 +----------------+

If an unexpected FIN is received, the server will ignore it:

 +----------------+
 | Client  Server |  [[ Good connection ]]
 +----------------+
 |  FIN -->  |    |
 |           v    |
 |         (nil)  |
 +----------------+

+-----------+
| Constants |
+-----------+

/* Message types */
#define MESSAGE_TYPE_SYN        (0x00)
#define MESSAGE_TYPE_MSG        (0x01)
#define MESSAGE_TYPE_FIN        (0x02)
#define MESSAGE_TYPE_STRAIGHTUP (0xFF)

/* Options */
#define OPT_NAME     (0x01)
#define OPT_CONNECT  (0x02)

+----------+
| Messages |
+----------+

Note:
- All fields are big endian.
- It is assumed that we know the length of the datagram; if we don't, a
  lower-level wrapper is required (eg, for TCP I prefix a 2-byte length
  header)

-----------------------
MESSAGE_TYPE_SYN [0x00]
-----------------------

- (uint8_t)  message_type [0x00]
- (uint16_t) session_id
- (uint16_t) initial seq number
- (uint16_t) options
If OPT_NAME is set:
  - (ntstring) name
If OPT_TUNNEL is set:
  - (ntstring) remote address (ip, hostname, etc)
  - (uint16_t) remote port

(Client to server)
- Each connection is initiated by a client sending a SYN containing a
  random session_id and random initial sequence number to the server as
  well as its requested options (no options are currently defined).
- If the client doesn't get a response, it should choose a new
  session_id before retransmitting
  - (this resolves a potential issue where a Server->Client SYN is lost,
    and the server thinks a session is running while the client doesn't)

- The following options are valid:
  - OPT_NAME - 0x01
    - Packet contains an additional field called the session name, which
      is a free-form field containing user-readable data
    - (ntstring) session_name
  - OPT_TUNNEL - 0x02
    - The server should make a connection to the specified host on the
      given port, and send all traffic to that host
    - (ntstring) remote ip address
    - (uint16_t) remote port

(Server to client)
- The server responds with its own SYN, containing its initial sequence
  number and its options.

(Notes)
- Both the session_id and initial sequence number should be randomized,
  not incremental or static or anything, to make connection-hijacking
  attacks more difficult (the two sequence numbers and the session_id
  give us approximately 48-bits of entropy per connection).

(Error states)
- If a client doesn't receive a response to a SYN packet, it means
  either the request or response was dropped. The client can choose to
  re-send the SYN packet for the same session, or it can generate a new
  SYN packet or session.
- If a server receives a second SYN for the same session before it
  receives a MSG packet, it should respond as if it's valid (the
  response may have been lost).
- If a client or server receives a SYN for a connection during said
  connection, it should be silently discarded.

------------------------
MESSAGE_TYPE_MSG: [0x01]
------------------------

- (uint8_t)  message_type [0x01]
- (uint16_t) session_id
- (uint16_t) sequence number
- (uint16_t) acknowledgement number
- (variable) other fields, as defined by 'options'
- (byte[]) data

(Client to server)
- The client should poll the server with a MSG from time to time (how
  frequently depends on the transport protocol and how much efficiency
  is desired). Once/second works well.
- The client sends its current sequence number, which is the intial
  sequence number plus the number of bytes that have been acknowledged
  by the server, so far.
- The client also sends its current acknowledgement number, which is the
  number of bytes it has successfully received from the server so far.
- The client sends data, if any, as the rest of the datagram (zero bytes
  of data is acceptable when polling for data).
- If the message is not acknowledged in due time, the client should
  re-transmit.

(Server to client)
- The server responds to MSG packets with its own MSG.
- The server's sequence number is the server's initial sequence number,
  plus the number of bytes that have been send to (and acknowledged by)
  the client, so far
- The server's acknowledgement number is the client's initial sequence
  number, plus the number of bytes successfully received so far.
- If the client's MSG contains invalid an invalid sequence or
  acknowledgement number, the server responds with its current
  sequence/acknowledgement/data (which will likely be a
  re-transmission).

(Error states)
- If a server fails to acknowledge data from the client, it likely means
  that a MSG packet was dropped and should be re-transmitted
- Likewise if a client fails to acknowledge data from the server
- Both parties should respond to old MSGs with the appropriate
  acknowledgement, even if they've already acknowledged it
- Neither party should never allow its sequence or acknowledgement number
  to get lower
- If a server receives an errant MSG from a client, it should respond
  with a FIN and close the connection.
- The client and server shouldn't increment their sequence numbers or
  their saved acknowledgement numbers until the other side has
  acknowledged the value in a response.

------------------------
MESSAGE_TYPE_FIN: [0x02]
------------------------

- (uint8_t)  message_type [0x02]
- (uint16_t) session_id
- (variable) other fields, as defined by 'options'

(Client to server)
- A client sends a FIN message to the server when it's completed its
  connection.

(Server to client)
- The server responds to a client's FIN with its own FIN.
- A server can also respond to a MSG with a FIN either when the
  connection has been cleanly terminated, or when there's an error in
  the connection.

(Out-of-state packets)
- Once a FIN has been sent, the client or server should no longer
  attempt to respond to anything from that connection.

-------------------------------
MESSAGE_TYPE_STRAIGHTUP: [0xFF] // TODO
-------------------------------
- (byte[]) data

(Notes)
- This is currently just an idea and isn't implemented.
- The plan for this is to be a purely connectionless/datagram-style
  message. A server would have to be specially configured to accept
  STRAIGHTUP packets, and one would have to assume that they're only
  going to come from a single source (since there is no associated
  session_id or seq/ack numbers).
