Some goals (these will be deleted as I complete them):
- Get rid of the ugly message-passing nonsense
  - Refactor similar to the client
  - I have a diagram of what I want, but it's on paper: see refactor.jpg
- Get rid of the stupid session IDs, those suck
- Clean up the UI, especially nested sessions
- Allow drivers to be created and destroyed while running
- Add a bunch of extra settings
- Commands that the current Ui can't understand should be passed up to its parents
  (Could be tricky!)
- Settings also inherit from their parents if they aren't set
- Create a better Ui
  - Currently created the "SWindow" class as a first attempt
  - May try doing an Ncurses one in addition to it
  - Would like to leave the door open for a Web UI some day
- Implement the actual commands in the Session, hopefully with a mixin or something
  - Ui will parse out commands, but that's it
- Make sure a good error is still displayed when the user doesn't run it as root
- Make @window.puts_ex use named parameters everywhere
- Make sure 'command -h' still works
- Take care of all TODOs that are possible
- Make sure all of the commands from the original version are present in the cleaned up version
- Give "windows" to more things, like tunnel drivers, since creating a new SWindow is easy
- Make it possible to create/destroy tunnel drivers
- At the end of dnscat.rb, do SWindow.wait(), and when it returns (the input thread ends), the process should be cleanly terminated
- Implement 'help' command and '-h' arguments everywhere
- Audit all uses of "puts()" throughout the program to ensure none of them are supposed to be window.puts()
- Make sure all the settings and commands from pre-refactor are present

Add settings that can:
- Execute an arbitrary command (or send data?) when the session starts
- Pass one or more sessions to an executable rather than interacting with them directly
- Send a command to multiple sessions (all parents, all children, etc)
- Log to a file (per-session or global)
