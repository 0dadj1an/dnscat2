This is purely brainstorming, but here we go...

Notes
-----
- All fields are encoded as big endian
- The "controller" will manage sessions and data encoding
- The "driver" will take the stream of bytes and send a DNS packet
- The "adapter" will interface witht he outside world
- Only the client will be in C, the server is more complex and will be
  written in ruby
- Multiple sessions will require multiple instances of 'controller'

Protocol
--------
Header (common to every packet):
- (uint16_t) length (not including the length field)
- (uint8_t)  message_type
- (uint16_t) session_id

MESSAGE_TYPE_SYN [0x00]
- (uint16_t) initial seq number
- (uint16_t) options

MESSAGE_TYPE_MSG: [0x01]
- (uint16_t) seq number
- (uint16_t) ack number
- (byte[]) data

MESSAGE_TYPE_FIN: [0x02]
- n/a

MESSAGE_TYPE_STRAIGHTUP: [0xFF] // TODO
- (byte[]) data

All data will be encoded as a stream of bytes, up to a certain
agreed-upon length value. 

Other stuff
-----------
- I'd eventually like signing/encryption
- Compression
- SOCKS/HTTP proxy

